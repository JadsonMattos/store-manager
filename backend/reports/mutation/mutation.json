{"files":{"src/controllers/salesController.js":{"language":"javascript","mutants":[{"id":"11","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":32},"start":{"column":44,"line":27}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":40},"start":{"column":18,"line":34}}},{"id":"7","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["6"],"coveredBy":["6"],"location":{"end":{"column":2,"line":7},"start":{"column":37,"line":4}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","8"],"location":{"end":{"column":2,"line":13},"start":{"column":37,"line":9}}},{"id":"9","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["9"],"coveredBy":["9"],"location":{"end":{"column":2,"line":19},"start":{"column":36,"line":15}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 204","status":"Killed","static":false,"testsCompleted":1,"killedBy":["10"],"coveredBy":["10"],"location":{"end":{"column":2,"line":25},"start":{"column":38,"line":21}}}],"source":"const { salesService } = require('../services');\nconst mapStatusHTTP = require('../utils/mapStatusHTTP');\n\nconst getAll = async (_req, res) => {\n  const { status, data } = await salesService.getAll();\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst getById = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await salesService.getById(id);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst insert = async (req, res) => {\n  const sales = req.body;\n  const { status, data } = await salesService.insert(sales);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst deleteId = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await salesService.deleteId(id);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst updateQuantity = async (req, res) => {\n  const { saleId, productId } = req.params;\n  const { quantity } = req.body;\n  const { status, data } = await salesService.updateQuantity(saleId, productId, quantity);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  deleteId,\n  updateQuantity,\n};\n"},"src/models/salesModel.js":{"language":"javascript","mutants":[{"id":"100","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":40},"start":{"column":49,"line":33}}},{"id":"107","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":53},"start":{"column":63,"line":47}}},{"id":"91","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":11},"start":{"column":44,"line":5}}},{"id":"93","mutatorName":"StringLiteral","replacement":"``","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":28,"line":21},"start":{"column":43,"line":16}}},{"id":"94","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":34,"line":21},"start":{"column":30,"line":21}}},{"id":"99","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":28},"start":{"column":5,"line":28}}},{"id":"101","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":95,"line":36},"start":{"column":5,"line":36}}},{"id":"102","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":34,"line":37},"start":{"column":5,"line":37}}},{"id":"103","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":39},"start":{"column":10,"line":39}}},{"id":"105","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":90,"line":43},"start":{"column":45,"line":43}}},{"id":"106","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":96,"line":43},"start":{"column":92,"line":43}}},{"id":"108","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":95,"line":49},"start":{"column":5,"line":49}}},{"id":"109","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":34,"line":50},"start":{"column":5,"line":50}}},{"id":"110","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":62},"start":{"column":18,"line":55}}},{"id":"90","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["25"],"coveredBy":["25"],"location":{"end":{"column":2,"line":13},"start":{"column":28,"line":4}}},{"id":"92","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":2,"line":24},"start":{"column":31,"line":15}}},{"id":"95","mutatorName":"BooleanLiteral","replacement":"sale","statusReason":"expected null to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":12,"line":22},"start":{"column":7,"line":22}}},{"id":"96","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected null to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["26"],"coveredBy":["26","27"],"location":{"end":{"column":12,"line":22},"start":{"column":7,"line":22}}},{"id":"97","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected undefined to equal null","status":"Killed","static":false,"testsCompleted":2,"killedBy":["27"],"coveredBy":["26","27"],"location":{"end":{"column":12,"line":22},"start":{"column":7,"line":22}}},{"id":"98","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be a number","status":"Killed","static":false,"testsCompleted":1,"killedBy":["28"],"coveredBy":["28"],"location":{"end":{"column":2,"line":31},"start":{"column":28,"line":26}}},{"id":"104","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["29"],"coveredBy":["29"],"location":{"end":{"column":2,"line":45},"start":{"column":32,"line":42}}}],"source":"// const snakeize = require('snakeize');\nconst connection = require('../database/connection');\n\nconst getAll = async () => {\n  const [sales] = await connection.execute(`SELECT\n    sales.id AS saleId,\n    sales.date, sales_products.product_id AS productId, sales_products.quantity\n    FROM StoreManager.sales\n    INNER JOIN StoreManager.sales_products ON sales.id = sales_products.sale_id\n    ORDER BY saleId ASC, productId ASC\n  `);\n  return sales;\n};\n\nconst getById = async (id) => {\n  const [sale] = await connection.execute(`SELECT\n    sales.date, sales_products.product_id AS productId, sales_products.quantity\n    FROM StoreManager.sales\n    INNER JOIN StoreManager.sales_products ON sales.id = sales_products.sale_id\n    WHERE sales.id = ?\n    ORDER BY productid ASC`, [id]);\n  if (!sale) return null;\n  return sale;\n};\n\nconst insert = async () => {\n  const [{ insertId }] = await connection.execute(\n    'INSERT INTO StoreManager.sales (date) VALUES (CURRENT_TIMESTAMP)',\n  );\n  return insertId;\n};\n\nconst insertProducts = async (salesProducts) => {\n  const { saleId, productId, quantity } = salesProducts;\n  await connection.execute(\n    'INSERT INTO StoreManager.sales_products (sale_id, product_id, quantity) VALUES (?, ?, ?)',\n    [saleId, productId, quantity],\n  );\n  return { productId, quantity };\n};\n\nconst deleteId = async (id) => {\n  const [remove] = await connection.execute('DELETE FROM StoreManager.sales WHERE id = ?', [id]);\n  return remove;\n};\n\nconst updateQuantity = async (saleId, productId, quantity) => {\n  const [update] = await connection.execute(\n    'UPDATE StoreManager.sales_products SET quantity = ? WHERE sale_id = ? AND product_id = ?',\n    [quantity, saleId, productId],\n  );\n  return update;\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  insertProducts,\n  deleteId,\n  updateQuantity,\n};"},"src/services/productsService.js":{"language":"javascript","mutants":[{"id":"125","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":12},"start":{"column":31,"line":8}}},{"id":"126","mutatorName":"BooleanLiteral","replacement":"product","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":10},"start":{"column":7,"line":10}}},{"id":"127","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":10},"start":{"column":7,"line":10}}},{"id":"128","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":10},"start":{"column":7,"line":10}}},{"id":"123","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":50,"line":5},"start":{"column":10,"line":5}}},{"id":"124","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":5},"start":{"column":20,"line":5}}},{"id":"129","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":10},"start":{"column":24,"line":10}}},{"id":"130","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":10},"start":{"column":34,"line":10}}},{"id":"131","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":85,"line":10},"start":{"column":53,"line":10}}},{"id":"132","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":10},"start":{"column":64,"line":10}}},{"id":"133","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":11},"start":{"column":10,"line":11}}},{"id":"134","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":11},"start":{"column":20,"line":11}}},{"id":"139","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":16},"start":{"column":26,"line":16}}},{"id":"140","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":16},"start":{"column":36,"line":16}}},{"id":"141","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":16},"start":{"column":55,"line":16}}},{"id":"142","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":73,"line":16},"start":{"column":66,"line":16}}},{"id":"143","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":49,"line":18},"start":{"column":10,"line":18}}},{"id":"144","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":18},"start":{"column":20,"line":18}}},{"id":"149","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":23},"start":{"column":24,"line":23}}},{"id":"150","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":23},"start":{"column":34,"line":23}}},{"id":"151","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":85,"line":23},"start":{"column":53,"line":23}}},{"id":"152","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":23},"start":{"column":64,"line":23}}},{"id":"153","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":52,"line":26},"start":{"column":10,"line":26}}},{"id":"154","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":26},"start":{"column":20,"line":26}}},{"id":"159","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":87,"line":31},"start":{"column":24,"line":31}}},{"id":"160","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":45,"line":31},"start":{"column":34,"line":31}}},{"id":"161","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":85,"line":31},"start":{"column":53,"line":31}}},{"id":"162","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":31},"start":{"column":64,"line":31}}},{"id":"163","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":44,"line":33},"start":{"column":10,"line":33}}},{"id":"164","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":33},"start":{"column":20,"line":33}}},{"id":"165","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":42},"start":{"column":18,"line":36}}},{"id":"122","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["30"],"coveredBy":["30"],"location":{"end":{"column":2,"line":6},"start":{"column":28,"line":3}}},{"id":"135","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":2,"line":19},"start":{"column":32,"line":14}}},{"id":"136","mutatorName":"BooleanLiteral","replacement":"productId","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":17,"line":16},"start":{"column":7,"line":16}}},{"id":"137","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'CREATED'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["31"],"coveredBy":["31","32"],"location":{"end":{"column":17,"line":16},"start":{"column":7,"line":16}}},{"id":"138","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'CREATED' to equal 'NOT_FOUND'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["32"],"coveredBy":["31","32"],"location":{"end":{"column":17,"line":16},"start":{"column":7,"line":16}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":2,"line":27},"start":{"column":33,"line":21}}},{"id":"146","mutatorName":"BooleanLiteral","replacement":"product","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":15,"line":23},"start":{"column":7,"line":23}}},{"id":"147","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'SUCCESSFUL'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["33"],"coveredBy":["33"],"location":{"end":{"column":15,"line":23},"start":{"column":7,"line":23}}},{"id":"148","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["33"],"location":{"end":{"column":15,"line":23},"start":{"column":7,"line":23}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":2,"line":34},"start":{"column":32,"line":29}}},{"id":"156","mutatorName":"BooleanLiteral","replacement":"product","statusReason":"expected 'NOT_FOUND' to equal 'NO_CONTENT'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":15,"line":31},"start":{"column":7,"line":31}}},{"id":"157","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'NOT_FOUND' to equal 'NO_CONTENT'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34"],"location":{"end":{"column":15,"line":31},"start":{"column":7,"line":31}}},{"id":"158","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["34"],"location":{"end":{"column":15,"line":31},"start":{"column":7,"line":31}}}],"source":"const { productsModel } = require('../models');\n\nconst getAll = async () => {\n  const products = await productsModel.getAll();\n  return { status: 'SUCCESSFUL', data: products };\n};\n\nconst getById = async (id) => {\n  const product = await productsModel.getById(id);\n  if (!product) return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  return { status: 'SUCCESSFUL', data: product };\n};\n\nconst insert = async (name) => {\n  const productId = await productsModel.insert(name);\n  if (!productId) return { status: 'NOT_FOUND', data: { message: 'Error' } };\n  const newProduct = await productsModel.getById(productId);\n  return { status: 'CREATED', data: newProduct };\n};\n\nconst put = async (id, name) => {\n  const product = await productsModel.getById(id);\n  if (!product) return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  await productsModel.put(id, name);\n  const newProduct = await productsModel.getById(id);\n  return { status: 'SUCCESSFUL', data: newProduct };\n};\n\nconst deleteId = async (id) => {\n  const product = await productsModel.getById(id);\n  if (!product) return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  await productsModel.deleteId(id);\n  return { status: 'NO_CONTENT', data: {} };\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  put,\n  deleteId,\n};"},"src/services/salesService.js":{"language":"javascript","mutants":[{"id":"169","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":13},"start":{"column":31,"line":9}}},{"id":"170","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":11},"start":{"column":7,"line":11}}},{"id":"171","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":11},"start":{"column":7,"line":11}}},{"id":"172","mutatorName":"EqualityOperator","replacement":"sale.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":11},"start":{"column":7,"line":11}}},{"id":"173","mutatorName":"EqualityOperator","replacement":"sale.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":11},"start":{"column":7,"line":11}}},{"id":"180","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":23},"start":{"column":41,"line":15}}},{"id":"181","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":17},"start":{"column":7,"line":17}}},{"id":"182","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":17},"start":{"column":7,"line":17}}},{"id":"187","mutatorName":"BooleanLiteral","replacement":"products","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":16,"line":21},"start":{"column":7,"line":21}}},{"id":"188","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":16,"line":21},"start":{"column":7,"line":21}}},{"id":"189","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":16,"line":21},"start":{"column":7,"line":21}}},{"id":"167","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":6},"start":{"column":10,"line":6}}},{"id":"168","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":32,"line":6},"start":{"column":20,"line":6}}},{"id":"174","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":11},"start":{"column":31,"line":11}}},{"id":"175","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":11},"start":{"column":41,"line":11}}},{"id":"176","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":12},"start":{"column":10,"line":12}}},{"id":"177","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":31,"line":12},"start":{"column":20,"line":12}}},{"id":"178","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":12},"start":{"column":39,"line":12}}},{"id":"179","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":12},"start":{"column":50,"line":12}}},{"id":"183","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":17},"start":{"column":21,"line":17}}},{"id":"184","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":17},"start":{"column":49,"line":17}}},{"id":"185","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":20},"start":{"column":56,"line":19}}},{"id":"186","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":62,"line":20},"start":{"column":31,"line":20}}},{"id":"190","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":88,"line":21},"start":{"column":25,"line":21}}},{"id":"191","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":21},"start":{"column":35,"line":21}}},{"id":"192","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":21},"start":{"column":54,"line":21}}},{"id":"193","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":84,"line":21},"start":{"column":65,"line":21}}},{"id":"194","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":74,"line":22},"start":{"column":10,"line":22}}},{"id":"195","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":29,"line":22},"start":{"column":20,"line":22}}},{"id":"196","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":22},"start":{"column":37,"line":22}}},{"id":"203","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":29},"start":{"column":12,"line":29}}},{"id":"204","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":34,"line":29},"start":{"column":22,"line":29}}},{"id":"205","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":31},"start":{"column":10,"line":31}}},{"id":"206","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":31,"line":31},"start":{"column":20,"line":31}}},{"id":"207","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":31},"start":{"column":39,"line":31}}},{"id":"208","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":31},"start":{"column":50,"line":31}}},{"id":"220","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":86,"line":56},"start":{"column":14,"line":55}}},{"id":"221","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":36,"line":55},"start":{"column":24,"line":55}}},{"id":"222","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":84,"line":56},"start":{"column":15,"line":56}}},{"id":"226","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":83,"line":58},"start":{"column":12,"line":58}}},{"id":"227","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":33,"line":58},"start":{"column":22,"line":58}}},{"id":"228","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":81,"line":58},"start":{"column":41,"line":58}}},{"id":"229","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":79,"line":58},"start":{"column":52,"line":58}}},{"id":"230","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":60},"start":{"column":10,"line":60}}},{"id":"231","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":31,"line":60},"start":{"column":20,"line":60}}},{"id":"232","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":60},"start":{"column":39,"line":60}}},{"id":"233","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":60},"start":{"column":50,"line":60}}},{"id":"234","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":69},"start":{"column":18,"line":63}}},{"id":"166","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["35"],"coveredBy":["35"],"location":{"end":{"column":2,"line":7},"start":{"column":28,"line":4}}},{"id":"197","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'status')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":2,"line":32},"start":{"column":32,"line":25}}},{"id":"198","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":22,"line":27},"start":{"column":7,"line":27}}},{"id":"199","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'NOT_FOUND' to equal 'NO_CONTENT'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":22,"line":27},"start":{"column":7,"line":27}}},{"id":"200","mutatorName":"EqualityOperator","replacement":"sale.length >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["38"],"location":{"end":{"column":22,"line":27},"start":{"column":7,"line":27}}},{"id":"201","mutatorName":"EqualityOperator","replacement":"sale.length <= 0","statusReason":"expected 'NOT_FOUND' to equal 'NO_CONTENT'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":22,"line":27},"start":{"column":7,"line":27}}},{"id":"202","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'NOT_FOUND' to equal 'NO_CONTENT'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38"],"location":{"end":{"column":4,"line":30},"start":{"column":24,"line":27}}},{"id":"209","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39","40"],"location":{"end":{"column":2,"line":61},"start":{"column":63,"line":48}}},{"id":"210","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":2,"killedBy":["40"],"coveredBy":["39","40"],"location":{"end":{"column":22,"line":50},"start":{"column":7,"line":50}}},{"id":"211","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39","40"],"location":{"end":{"column":22,"line":50},"start":{"column":7,"line":50}}},{"id":"212","mutatorName":"EqualityOperator","replacement":"sale.length >= 0","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":2,"killedBy":["40"],"coveredBy":["39","40"],"location":{"end":{"column":22,"line":50},"start":{"column":7,"line":50}}},{"id":"213","mutatorName":"EqualityOperator","replacement":"sale.length <= 0","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39","40"],"location":{"end":{"column":22,"line":50},"start":{"column":7,"line":50}}},{"id":"214","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":4,"line":59},"start":{"column":24,"line":50}}},{"id":"215","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":31,"line":52},"start":{"column":9,"line":52}}},{"id":"216","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":31,"line":52},"start":{"column":9,"line":52}}},{"id":"217","mutatorName":"EqualityOperator","replacement":"saleProduct.length >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["39"],"location":{"end":{"column":31,"line":52},"start":{"column":9,"line":52}}},{"id":"218","mutatorName":"EqualityOperator","replacement":"saleProduct.length <= 0","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":31,"line":52},"start":{"column":9,"line":52}}},{"id":"219","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":6,"line":57},"start":{"column":33,"line":52}}},{"id":"223","mutatorName":"UnaryOperator","replacement":"-productId","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":44,"line":56},"start":{"column":34,"line":56}}},{"id":"224","mutatorName":"UnaryOperator","replacement":"-quantity","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":65,"line":56},"start":{"column":56,"line":56}}},{"id":"225","mutatorName":"UnaryOperator","replacement":"-saleId","statusReason":"expected { Object (status, data) } to deeply equal { Object (status, data) }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["39"],"coveredBy":["39"],"location":{"end":{"column":82,"line":56},"start":{"column":75,"line":56}}}],"source":"const { salesModel } = require('../models');\nconst schema = require('./validations/validations');\n\nconst getAll = async () => {\n  const sales = await salesModel.getAll();\n  return { status: 'SUCCESSFUL', data: sales };\n};\n\nconst getById = async (id) => {\n  const sale = await salesModel.getById(id);\n  if (sale.length > 0) return { status: 'SUCCESSFUL', data: sale };\n  return { status: 'NOT_FOUND', data: { message: 'Sale not found' } };\n};\n\nconst insert = async (salesProducts) => {\n  const error = await schema.validation(salesProducts);\n  if (error) return { status: error.type, data: { message: error.message } };\n  const saleId = await salesModel.insert();\n  const products = await Promise.all(salesProducts.map(({ productId, quantity }) => (\n    salesModel.insertProducts({ saleId, productId, quantity }))));\n  if (!products) return { status: 'NOT_FOUND', data: { message: 'Product not found' } };\n  return { status: 'CREATED', data: { id: saleId, itemsSold: products } };\n};\n\nconst deleteId = async (id) => {\n  const sale = await salesModel.getById(id);\n  if (sale.length > 0) {\n    await salesModel.deleteId(id);\n    return { status: 'NO_CONTENT', data: {} };\n  }\n  return { status: 'NOT_FOUND', data: { message: 'Sale not found' } };\n};\n\n// const updateQuantity = async (saleId, productId, quantity) => {\n//   const sale = await salesModel.getById(saleId);\n//   if (!sale) return { status: 'NOT_FOUND', data: { message: 'Sale not found' } };\n\n//   const updateResult = await salesModel.updateQuantity(saleId, productId, quantity);\n\n//   if (updateResult.affectedRows === 0) {\n//     return { status: 'NOT_FOUND', data: { message: 'Product not found in sale' } };\n//   }\n\n//   const updatedSale = await salesModel.getById(saleId);\n//   return { status: 'SUCCESSFUL', data: updatedSale };\n// };\n\nconst updateQuantity = async (saleId, productId, quantity) => {\n  const sale = await salesModel.getById(saleId);\n  if (sale.length > 0) {\n    const saleProduct = await salesModel.getById(productId);\n    if (saleProduct.length > 0) {\n      await salesModel.updateQuantity(saleId, productId, quantity);\n      const { date } = sale[0];\n      return { status: 'SUCCESSFUL',\n        data: { date, productId: +productId, quantity: +quantity, saleId: +saleId } };\n    }\n    return { status: 'NOT_FOUND', data: { message: 'Product not found in sale' } };\n  }\n  return { status: 'NOT_FOUND', data: { message: 'Sale not found' } };\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  deleteId,\n  updateQuantity,\n};"},"src/controllers/index.js":{"language":"javascript","mutants":[{"id":"0","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsController = require('./productsController');\nconst salesController = require('./salesController');\n\nmodule.exports = {\n  productsController,\n  salesController,\n};"},"src/controllers/productsController.js":{"language":"javascript","mutants":[{"id":"6","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":40},"start":{"column":18,"line":34}}},{"id":"2","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1","2"],"location":{"end":{"column":2,"line":13},"start":{"column":37,"line":9}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 201","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":2,"line":19},"start":{"column":36,"line":15}}},{"id":"4","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4"],"location":{"end":{"column":2,"line":26},"start":{"column":33,"line":21}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5"],"location":{"end":{"column":2,"line":32},"start":{"column":38,"line":28}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 200","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":2,"line":7},"start":{"column":37,"line":4}}}],"source":"const { productsService } = require('../services');\nconst mapStatusHTTP = require('../utils/mapStatusHTTP');\n\nconst getAll = async (_req, res) => {\n  const { status, data } = await productsService.getAll();\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst getById = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await productsService.getById(id);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst insert = async (req, res) => {\n  const { name } = req.body;\n  const { status, data } = await productsService.insert(name);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst put = async (req, res) => {\n  const { id } = req.params;\n  const { name } = req.body;\n  const { status, data } = await productsService.put(id, name);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nconst deleteId = async (req, res) => {\n  const { id } = req.params;\n  const { status, data } = await productsService.deleteId(id);\n  return res.status(mapStatusHTTP(status)).json(data);\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  put,\n  deleteId,\n};"},"src/database/connection.js":{"language":"javascript","mutants":[{"id":"13","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":37,"line":3}}}],"source":"const mysql = require('mysql2/promise');\n\nconst connection = mysql.createPool({\n  user: process.env.MYSQL_USER,\n  password: process.env.MYSQL_PASSWORD,\n  host: process.env.MYSQL_HOSTNAME,\n  database: process.env.MYSQL_DATABASE,\n  port: process.env.MYSQL_PORT,\n});\n\nmodule.exports = connection;"},"src/middlewares/validateProduct.js":{"language":"javascript","mutants":[{"id":"22","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":4},"start":{"column":33,"line":4}}},{"id":"23","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":64,"line":4},"start":{"column":44,"line":4}}},{"id":"29","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":96,"line":7},"start":{"column":33,"line":7}}},{"id":"30","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":94,"line":7},"start":{"column":44,"line":7}}},{"id":"14","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","13","14"],"location":{"end":{"column":2,"line":10},"start":{"column":51,"line":1}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"res.status is not a function","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","13","14"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"16","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of null (reading 'length')","status":"Killed","static":false,"testsCompleted":2,"killedBy":["12"],"coveredBy":["11","12","13","14"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"17","mutatorName":"LogicalOperator","replacement":"!name && name === null","statusReason":"expected status to have been called with arguments 400\n\u001b[31m422\u001b[0m \u001b[32m400\u001b[0m ","status":"Killed","static":false,"testsCompleted":3,"killedBy":["13"],"coveredBy":["11","12","13","14"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"18","mutatorName":"BooleanLiteral","replacement":"name","statusReason":"res.status is not a function","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","12","13","14"],"location":{"end":{"column":12,"line":3},"start":{"column":7,"line":3}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["11","14"],"location":{"end":{"column":29,"line":3},"start":{"column":16,"line":3}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"name !== null","statusReason":"res.status is not a function","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","14"],"location":{"end":{"column":29,"line":3},"start":{"column":16,"line":3}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of null (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["12"],"coveredBy":["12","13"],"location":{"end":{"column":4,"line":5},"start":{"column":31,"line":3}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"res.status is not a function","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","14"],"location":{"end":{"column":22,"line":6},"start":{"column":7,"line":6}}},{"id":"25","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":2,"killedBy":["14"],"coveredBy":["11","14"],"location":{"end":{"column":22,"line":6},"start":{"column":7,"line":6}}},{"id":"26","mutatorName":"EqualityOperator","replacement":"name.length <= 5","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["11","14"],"location":{"end":{"column":22,"line":6},"start":{"column":7,"line":6}}},{"id":"27","mutatorName":"EqualityOperator","replacement":"name.length >= 5","statusReason":"res.status is not a function","status":"Killed","static":false,"testsCompleted":1,"killedBy":["11"],"coveredBy":["11","14"],"location":{"end":{"column":22,"line":6},"start":{"column":7,"line":6}}},{"id":"28","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14"],"location":{"end":{"column":4,"line":8},"start":{"column":24,"line":6}}}],"source":"const validateProduct = async (req, res, next) => {\n  const { name } = req.body;\n  if (!name || name === null) {\n    return res.status(400).json({ message: '\"name\" is required' });\n  }\n  if (name.length < 5) {\n    return res.status(422).json({ message: '\"name\" length must be at least 5 characters long' });\n  } \n  return next();\n};\n\nmodule.exports = validateProduct;"},"src/middlewares/validateProductUpdate.js":{"language":"javascript","mutants":[{"id":"35","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":7},"start":{"column":45,"line":7}}},{"id":"36","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":75,"line":7},"start":{"column":56,"line":7}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":2,"line":9},"start":{"column":57,"line":3}}},{"id":"32","mutatorName":"BooleanLiteral","replacement":"updated","statusReason":"expected stub to have been called with arguments 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":15,"line":7},"start":{"column":7,"line":7}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["15"],"location":{"end":{"column":15,"line":7},"start":{"column":7,"line":7}}},{"id":"34","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 404","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15"],"location":{"end":{"column":15,"line":7},"start":{"column":7,"line":7}}}],"source":"const { productsService } = require('../services');\n\nconst validateProductUpdate = async (req, res, next) => {\n  const { id } = req.params;\n  const { name } = req.body;\n  const updated = await productsService.put(id, name);\n  if (!updated) return res.status(404).json({ message: 'Product not found' });\n  return next();\n};\n\nmodule.exports = validateProductUpdate;\n"},"src/middlewares/validateQuantity.js":{"language":"javascript","mutants":[{"id":"42","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":4},"start":{"column":33,"line":4}}},{"id":"43","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":4},"start":{"column":44,"line":4}}},{"id":"49","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":93,"line":7},"start":{"column":33,"line":7}}},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":91,"line":7},"start":{"column":44,"line":7}}},{"id":"37","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":2,"line":10},"start":{"column":46,"line":1}}},{"id":"38","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 422\n\u001b[31m400\u001b[0m \u001b[32m422\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["17"],"coveredBy":["16","17"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"39","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"40","mutatorName":"EqualityOperator","replacement":"quantity !== undefined","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":29,"line":3},"start":{"column":7,"line":3}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":4,"line":5},"start":{"column":31,"line":3}}},{"id":"44","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["17"],"location":{"end":{"column":20,"line":6},"start":{"column":7,"line":6}}},{"id":"45","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":20,"line":6},"start":{"column":7,"line":6}}},{"id":"46","mutatorName":"EqualityOperator","replacement":"quantity < 0","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":20,"line":6},"start":{"column":7,"line":6}}},{"id":"47","mutatorName":"EqualityOperator","replacement":"quantity > 0","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":20,"line":6},"start":{"column":7,"line":6}}},{"id":"48","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 422","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":4,"line":8},"start":{"column":22,"line":6}}}],"source":"const validateQuantity = (req, res, next) => {\n  const { quantity } = req.body;\n  if (quantity === undefined) {\n    return res.status(400).json({ message: '\"quantity\" is required' });\n  }\n  if (quantity <= 0) {\n    return res.status(422).json({ message: '\"quantity\" must be greater than or equal to 1' });\n  }\n  return next();\n};\n\nmodule.exports = validateQuantity;"},"src/middlewares/validateSale.js":{"language":"javascript","mutants":[{"id":"52","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":4},"start":{"column":36,"line":4}}},{"id":"54","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":5},"start":{"column":37,"line":5}}},{"id":"61","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":71,"line":7},"start":{"column":33,"line":7}}},{"id":"62","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":7},"start":{"column":44,"line":7}}},{"id":"63","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":65,"line":9},"start":{"column":36,"line":9}}},{"id":"65","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":10},"start":{"column":36,"line":10}}},{"id":"72","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":70,"line":12},"start":{"column":33,"line":12}}},{"id":"73","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":12},"start":{"column":44,"line":12}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":2,"line":15},"start":{"column":42,"line":1}}},{"id":"53","mutatorName":"MethodExpression","replacement":"productsId.every(id => id === undefined)","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["18","19"],"location":{"end":{"column":62,"line":5},"start":{"column":21,"line":5}}},{"id":"55","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected json to have been called with arguments { message: '\"quantity\" is required' }\n\u001b[31m{ message: '\"productId\" is required' }\u001b[0m \u001b[32m{ message: '\"quantity\" is required' }\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":61,"line":5},"start":{"column":45,"line":5}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":61,"line":5},"start":{"column":45,"line":5}}},{"id":"57","mutatorName":"EqualityOperator","replacement":"id !== undefined","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":61,"line":5},"start":{"column":45,"line":5}}},{"id":"58","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected json to have been called with arguments { message: '\"quantity\" is required' }\n\u001b[31m{ message: '\"productId\" is required' }\u001b[0m \u001b[32m{ message: '\"quantity\" is required' }\u001b[0m ","status":"Killed","static":false,"testsCompleted":2,"killedBy":["19"],"coveredBy":["18","19"],"location":{"end":{"column":16,"line":6},"start":{"column":7,"line":6}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","19"],"location":{"end":{"column":16,"line":6},"start":{"column":7,"line":6}}},{"id":"60","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18"],"location":{"end":{"column":4,"line":8},"start":{"column":18,"line":6}}},{"id":"64","mutatorName":"MethodExpression","replacement":"quantities.every(quant => quant === undefined)","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":67,"line":10},"start":{"column":20,"line":10}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":66,"line":10},"start":{"column":47,"line":10}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":66,"line":10},"start":{"column":47,"line":10}}},{"id":"68","mutatorName":"EqualityOperator","replacement":"quant !== undefined","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":66,"line":10},"start":{"column":47,"line":10}}},{"id":"69","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["19"],"location":{"end":{"column":15,"line":11},"start":{"column":7,"line":11}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":15,"line":11},"start":{"column":7,"line":11}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected stub to have been called with arguments 400","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19"],"location":{"end":{"column":4,"line":13},"start":{"column":17,"line":11}}}],"source":"const validateSale = (req, res, next) => {\n  const itemsSold = req.body;\n  \n  const productsId = itemsSold.map((product) => product.productId);\n  const productId = productsId.some((id) => id === undefined);\n  if (productId) {\n    return res.status(400).json({ message: '\"productId\" is required' });\n  }\n  const quantities = itemsSold.map((product) => product.quantity);\n  const quantity = quantities.some((quant) => quant === undefined);\n  if (quantity) {\n    return res.status(400).json({ message: '\"quantity\" is required' });\n  }\n  next();\n};\n\nmodule.exports = validateSale;"},"src/models/index.js":{"language":"javascript","mutants":[{"id":"74","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsModel = require('./productsModel');\nconst salesModel = require('./salesModel');\n\nmodule.exports = {\n  productsModel,\n  salesModel,\n};"},"src/models/productsModel.js":{"language":"javascript","mutants":[{"id":"76","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":96,"line":4},"start":{"column":47,"line":4}}},{"id":"78","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":10},"start":{"column":5,"line":10}}},{"id":"79","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":9,"line":11},"start":{"column":5,"line":11}}},{"id":"81","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":58,"line":18},"start":{"column":5,"line":18}}},{"id":"82","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":11,"line":19},"start":{"column":5,"line":19}}},{"id":"84","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":26},"start":{"column":5,"line":26}}},{"id":"85","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":15,"line":27},"start":{"column":5,"line":27}}},{"id":"87","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":34},"start":{"column":5,"line":34}}},{"id":"88","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"Ignored because of excluded mutation \"ArrayDeclaration\"","status":"Ignored","static":false,"location":{"end":{"column":9,"line":35},"start":{"column":5,"line":35}}},{"id":"89","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":46},"start":{"column":18,"line":40}}},{"id":"75","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an array","status":"Killed","static":false,"testsCompleted":1,"killedBy":["20"],"coveredBy":["20"],"location":{"end":{"column":2,"line":6},"start":{"column":28,"line":3}}},{"id":"77","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["21"],"coveredBy":["21"],"location":{"end":{"column":2,"line":14},"start":{"column":31,"line":8}}},{"id":"80","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 4","status":"Killed","static":false,"testsCompleted":1,"killedBy":["22"],"coveredBy":["22"],"location":{"end":{"column":2,"line":22},"start":{"column":32,"line":16}}},{"id":"83","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23"],"location":{"end":{"column":2,"line":30},"start":{"column":33,"line":24}}},{"id":"86","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be an object","status":"Killed","static":false,"testsCompleted":1,"killedBy":["24"],"coveredBy":["24"],"location":{"end":{"column":2,"line":38},"start":{"column":32,"line":32}}}],"source":"const connection = require('../database/connection');\n\nconst getAll = async () => {\n  const [products] = await connection.execute('SELECT * FROM StoreManager.products ORDER BY id');\n  return products;\n};\n\nconst getById = async (id) => {\n  const [[product]] = await connection.execute(\n    'SELECT * FROM StoreManager.products WHERE id = ? ORDER BY id',\n    [id],\n  );\n  return product;\n};\n\nconst insert = async (name) => {\n  const [{ insertId }] = await connection.execute(\n    'INSERT INTO StoreManager.products (name) VALUES (?)',\n    [name],\n  );\n  return insertId;\n};\n\nconst put = async (id, name) => {\n  const [update] = await connection.execute(\n    'UPDATE StoreManager.products SET name = ? WHERE id = ?',\n    [name, id],\n  );\n  return update;\n};\n\nconst deleteId = async (id) => {\n  const [deleted] = await connection.execute(\n    'DELETE FROM StoreManager.products WHERE id = ?',\n    [id],\n  );\n  return deleted;\n};\n\nmodule.exports = {\n  getAll,\n  getById,\n  insert,\n  put,\n  deleteId,\n};"},"src/routes/productsRouter.js":{"language":"javascript","mutants":[{"id":"111","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":23,"line":6},"start":{"column":12,"line":6}}},{"id":"112","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":27,"line":7},"start":{"column":12,"line":7}}},{"id":"113","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":24,"line":8},"start":{"column":13,"line":8}}},{"id":"114","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":27,"line":9},"start":{"column":12,"line":9}}},{"id":"115","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":30,"line":10},"start":{"column":15,"line":10}}}],"source":"const router = require('express').Router();\nconst { productsController } = require('../controllers');\nconst validateProduct = require('../middlewares/validateProduct');\nconst validateProductUpdate = require('../middlewares/validateProductUpdate');\n\nrouter.get('/products', productsController.getAll);\nrouter.get('/products/:id', productsController.getById);\nrouter.post('/products', validateProduct, productsController.insert);\nrouter.put('/products/:id', validateProduct, validateProductUpdate, productsController.put);\nrouter.delete('/products/:id', productsController.deleteId);\n\nmodule.exports = router;"},"src/routes/salesRouter.js":{"language":"javascript","mutants":[{"id":"116","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":20,"line":6},"start":{"column":12,"line":6}}},{"id":"117","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":24,"line":7},"start":{"column":12,"line":7}}},{"id":"118","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":21,"line":8},"start":{"column":13,"line":8}}},{"id":"119","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":27,"line":9},"start":{"column":15,"line":9}}},{"id":"120","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":53,"line":11},"start":{"column":8,"line":11}}}],"source":"const router = require('express').Router();\nconst { salesController } = require('../controllers');\nconst validateQuantity = require('../middlewares/validateQuantity');\nconst validateSale = require('../middlewares/validateSale');\n\nrouter.get('/sales', salesController.getAll);\nrouter.get('/sales/:id', salesController.getById);\nrouter.post('/sales', validateSale, salesController.insert);\nrouter.delete('/sales/:id', salesController.deleteId);\nrouter\n  .put('/sales/:saleId/products/:productId/quantity', validateQuantity, salesController\n    .updateQuantity);\n\nmodule.exports = router;"},"src/services/index.js":{"language":"javascript","mutants":[{"id":"121","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":7},"start":{"column":18,"line":4}}}],"source":"const productsService = require('./productsService');\nconst salesService = require('./salesService');\n\nmodule.exports = {\n  productsService,\n  salesService,\n};"},"src/services/validations/saleSchema.js":{"language":"javascript","mutants":[{"id":"235","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":12},"start":{"column":31,"line":3}}},{"id":"236","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":4,"line":6},"start":{"column":57,"line":4}}},{"id":"237","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":46,"line":5},"start":{"column":21,"line":5}}},{"id":"238","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":6,"line":11},"start":{"column":15,"line":8}}},{"id":"239","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":47,"line":9},"start":{"column":23,"line":9}}},{"id":"240","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":68,"line":10},"start":{"column":21,"line":10}}},{"id":"241","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":19},"start":{"column":18,"line":16}}}],"source":"const Joi = require('joi');\n\nconst saleSchema = Joi.object({\n  productId: Joi.number().integer().required().messages({\n    'any.required': '\"productId\" is required',\n  }),\n  quantity: Joi.number().integer().min(1).required()\n    .messages({\n      'any.required': '\"quantity\" is required',\n      'number.min': '\"quantity\" must be greater than or equal to 1',\n    }),\n});\n\nconst array = Joi.array().items(saleSchema);\n\nmodule.exports = {\n  saleSchema,\n  array,\n};"},"src/services/validations/validations.js":{"language":"javascript","mutants":[{"id":"245","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":69,"line":6},"start":{"column":21,"line":6}}},{"id":"246","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":43,"line":6},"start":{"column":29,"line":6}}},{"id":"247","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":67,"line":9},"start":{"column":10,"line":9}}},{"id":"249","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":10},"start":{"column":33,"line":10}}},{"id":"255","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":74,"line":11},"start":{"column":23,"line":11}}},{"id":"256","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":42,"line":11},"start":{"column":31,"line":11}}},{"id":"257","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":72,"line":11},"start":{"column":53,"line":11}}},{"id":"258","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":16},"start":{"column":18,"line":14}}},{"id":"242","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["36"],"coveredBy":["36","37"],"location":{"end":{"column":2,"line":12},"start":{"column":41,"line":4}}},{"id":"243","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Cannot read properties of null (reading 'message')","status":"Killed","static":false,"testsCompleted":2,"killedBy":["37"],"coveredBy":["36","37"],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"244","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Access denied for user ''@'172.18.0.1' (using password: YES)","status":"Killed","static":false,"testsCompleted":1,"killedBy":["36"],"coveredBy":["36","37"],"location":{"end":{"column":12,"line":6},"start":{"column":7,"line":6}}},{"id":"248","mutatorName":"MethodExpression","replacement":"products.every(item => item === undefined)","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":62,"line":10},"start":{"column":19,"line":10}}},{"id":"250","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":61,"line":10},"start":{"column":43,"line":10}}},{"id":"251","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":61,"line":10},"start":{"column":43,"line":10}}},{"id":"252","mutatorName":"EqualityOperator","replacement":"item !== undefined","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":61,"line":10},"start":{"column":43,"line":10}}},{"id":"253","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["37"],"location":{"end":{"column":14,"line":11},"start":{"column":7,"line":11}}},{"id":"254","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of undefined (reading 'type')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["37"],"coveredBy":["37"],"location":{"end":{"column":14,"line":11},"start":{"column":7,"line":11}}}],"source":"const { productsModel } = require('../../models');\nconst { array } = require('./saleSchema');\n\nconst validation = async (itemsSold) => {\n  const { error } = await array.validate(itemsSold);\n  if (error) return { type: 'INVALID_DATA', message: error.message };\n\n  const products = await Promise.all(itemsSold\n    .map(async ({ productId }) => productsModel.getById(productId)));\n  const product = products.some((item) => item === undefined);\n  if (product) return { type: 'NOT_FOUND', message: 'Product not found' };\n};\n\nmodule.exports = {\n  validation,\n};"},"src/utils/generateFormattedQuery.js":{"language":"javascript","mutants":[{"id":"259","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":62,"line":3},"start":{"column":20,"line":3}}},{"id":"260","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":61,"line":3},"start":{"column":57,"line":3}}},{"id":"261","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":78,"line":4},"start":{"column":21,"line":4}}},{"id":"262","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":4},"start":{"column":57,"line":4}}},{"id":"263","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":66,"line":4},"start":{"column":63,"line":4}}},{"id":"264","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Ignored because of excluded mutation \"StringLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":77,"line":4},"start":{"column":73,"line":4}}},{"id":"265","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":18,"line":6}}}],"source":"// const snakeize = require('snakeize');\n\nconst columnName = (object) => Object.keys(object).join(', ');\nconst placeholder = (object) => Object.keys(object).map(() => '?').join(', ');\n\nmodule.exports = {\n  columnName,\n  placeholder,\n};\n"},"src/utils/mapStatusHTTP.js":{"language":"javascript","mutants":[{"id":"266","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Ignored because of excluded mutation \"ObjectLiteral\"","status":"Ignored","static":false,"location":{"end":{"column":2,"line":9},"start":{"column":19,"line":1}}},{"id":"267","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Ignored because of excluded mutation \"ArrowFunction\"","status":"Ignored","static":false,"location":{"end":{"column":80,"line":11},"start":{"column":23,"line":11}}},{"id":"268","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected status to have been called with arguments 200\n\u001b[31mtrue\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10"],"location":{"end":{"column":80,"line":11},"start":{"column":35,"line":11}}},{"id":"269","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected status to have been called with arguments 200\n\u001b[31mfalse\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10"],"location":{"end":{"column":80,"line":11},"start":{"column":35,"line":11}}},{"id":"270","mutatorName":"LogicalOperator","replacement":"httpError[status] && httpError.INTERNAL_ERROR","statusReason":"expected status to have been called with arguments 200\n\u001b[31m500\u001b[0m \u001b[32m200\u001b[0m ","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0","1","2","3","4","5","6","7","8","9","10"],"location":{"end":{"column":80,"line":11},"start":{"column":35,"line":11}}}],"source":"const httpError = {\n  SUCCESSFUL: 200,\n  NOT_FOUND: 404,\n  CREATED: 201,\n  INVALID_DATA: 422,\n  BAD_REQUEST: 400,\n  INTERNAL_ERROR: 500,\n  NO_CONTENT: 204,\n};\n\nconst mapStatusHTTP = (status) => httpError[status] || httpError.INTERNAL_ERROR;\n\nmodule.exports = mapStatusHTTP;"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"tests/unit/controllers/productsController.test.js":{"tests":[{"id":"0","name":"Testa Controller de produtos retorna produtos com sucesso - status 200"},{"id":"1","name":"Testa Controller de produtos retorna um produto específico com sucesso - status 200"},{"id":"2","name":"Testa Controller de produtos Não encontra um produto com id inexistente - status 404"},{"id":"3","name":"Testa Controller de produtos Inserindo um produto com id com sucesso - status 201"},{"id":"4","name":"Testa Controller de produtos atualizando um produto com sucesso - status 200"},{"id":"5","name":"Testa Controller de produtos deletando um produto com sucesso - status 200"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\nconst { productsService } = require('../../../src/services');\nconst { productsController } = require('../../../src/controllers');\nconst { productsStatus, productsALL, productSuccessful, productNotFound, productID, productCreated, productPostId, productSuccessfulUpdate } = require('../../mocks/productsMock');\n\ndescribe('Testa Controller de produtos', function () {\n  it('retorna produtos com sucesso - status 200', async function () {\n    sinon.stub(productsService, 'getAll').resolves(productsStatus);\n    const req = { params: { }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.getAll(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(productsALL);\n  });\n\n  it('retorna um produto específico com sucesso - status 200', async function () {\n    sinon.stub(productsService, 'getById').resolves(productSuccessful);\n    const req = { params: { id: 1 }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.getById(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(productID);\n  });\n\n  it('Não encontra um produto com id inexistente - status 404', async function () {\n    sinon.stub(productsService, 'getById').resolves(productNotFound);\n    const req = { params: { id: 123456789 }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.getById(req, res);\n    expect(res.status).to.have.been.calledWith(404);\n    expect(res.json).to.have.been.calledWith(sinon.match.has('message', 'Product not found'));\n  });\n\n  it('Inserindo um produto com id com sucesso - status 201', async function () {\n    sinon.stub(productsService, 'insert').resolves(productCreated);\n    const req = { params: { }, body: { name: 'ProductX' } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.insert(req, res);\n    const product = productPostId;\n    expect(res.status).to.have.been.calledWith(201);\n    expect(res.json).to.have.been.calledWith(product);\n  });\n\n  it('atualizando um produto com sucesso - status 200', async function () {\n    sinon.stub(productsService, 'put').resolves(productSuccessfulUpdate);\n    const req = { params: { id: 1 }, body: { name: 'Martelo do Batman' } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.put(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith({ id: 1, name: 'Martelo do Batman' });\n  });\n\n  it('deletando um produto com sucesso - status 200', async function () {\n    sinon.stub(productsService, 'deleteId').resolves(productSuccessful);\n    const req = { params: { id: 1 }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await productsController.deleteId(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(productID);\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/controllers/salesController.test.js":{"tests":[{"id":"6","name":"Testa Controller de sales retorna sales com sucesso - status 200"},{"id":"7","name":"Testa Controller de sales retorna um sale específico com sucesso - status 200"},{"id":"8","name":"Testa Controller de sales Não encontra um sale com id inexistente - status 404"},{"id":"9","name":"Testa Controller de sales cria uma sale com vários produtos - status 201"},{"id":"10","name":"Testa Controller de sales remove uma sale com sucesso - status 204"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\nconst { salesService } = require('../../../src/services');\nconst { salesController } = require('../../../src/controllers');\nconst { salesStatus, salesALL, saleSuccessful, saleNotFound, saleID, salesProductsCreated } = require('../../mocks/salesMock');\nconst { productsSuccessfulDelete } = require('../../mocks/productsMock');\n\ndescribe('Testa Controller de sales', function () {\n  it('retorna sales com sucesso - status 200', async function () {\n    sinon.stub(salesService, 'getAll').resolves(salesStatus);\n    const req = { params: { }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await salesController.getAll(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(salesALL);\n  });\n\n  it('retorna um sale específico com sucesso - status 200', async function () {\n    sinon.stub(salesService, 'getById').resolves(saleSuccessful);\n    const req = { params: { id: 2 }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await salesController.getById(req, res);\n    expect(res.status).to.have.been.calledWith(200);\n    expect(res.json).to.have.been.calledWith(saleID);\n  });\n\n  it('Não encontra um sale com id inexistente - status 404', async function () {\n    sinon.stub(salesService, 'getById').resolves(saleNotFound);\n    const req = { params: { id: 123456789 }, body: { } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await salesController.getById(req, res);\n    expect(res.status).to.have.been.calledWith(404);\n    expect(res.json).to.have.been.calledWith(sinon.match.has('message', 'Sale not found'));\n  });\n\n  it('cria uma sale com vários produtos - status 201', async function () {\n    sinon.stub(salesService, 'insert').resolves(salesProductsCreated);\n    const req = { params: { }, body: { itemsSold: [{ productId: 1, quantity: 2 }, { productId: 2, quantity: 5 }] } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await salesController.insert(req, res);\n    expect(res.status).to.have.been.calledWith(201);\n    expect(res.json).to.have.been.calledWith(salesProductsCreated.data);\n  });\n\n  it('remove uma sale com sucesso - status 204', async function () {\n    sinon.stub(salesService, 'deleteId').resolves(productsSuccessfulDelete);\n    const req = { params: { id: 2 } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    await salesController.deleteId(req, res);\n    expect(res.status).to.have.been.calledWith(204);\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/middlewares/validateProduct.test.js":{"tests":[{"id":"11","name":"testa middlewares verifica se o middleware está sendo chamado"},{"id":"12","name":"testa middlewares testa o validateProduct caso o nome seja null"},{"id":"13","name":"testa middlewares testa o validateProduct caso o nome vazio"},{"id":"14","name":"testa middlewares testa o validateProduct caso o nome tenha menos de 5 caracteres"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\nconst validateProduct = require('../../../src/middlewares/validateProduct');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\ndescribe('testa middlewares', function () {\n  it('verifica se o middleware está sendo chamado', async function () {\n    const req = { body: { name: 'ProdutoX' } };\n    const res = {};\n    const next = sinon.stub();\n    await validateProduct(req, res, next);\n    expect(next).to.have.been.calledWith();\n  });\n  \n  it('testa o validateProduct caso o nome seja null', async function () {\n    const req = { body: { name: null } };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateProduct(req, res, next);\n    expect(res.status).to.be.calledWith(400);\n    expect(res.json).to.be.calledWith({ message: '\"name\" is required' });\n  });\n\n  it('testa o validateProduct caso o nome vazio', async function () {\n    const req = { body: { name: '' } };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateProduct(req, res, next);\n    expect(res.status).to.be.calledWith(400);\n    expect(res.json).to.be.calledWith({ message: '\"name\" is required' });\n  });\n  \n  it('testa o validateProduct caso o nome tenha menos de 5 caracteres', async function () {\n    const req = { body: { name: 'a' } };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateProduct(req, res, next);\n    expect(res.status).to.be.calledWith(422);\n    expect(res.json).to.be.calledWith({ message: '\"name\" length must be at least 5 characters long' });\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/middlewares/validateProductUpdate.test.js":{"tests":[{"id":"15","name":"testa middlewares testa o validateProductUpdate na impossibilidade de atualizar um produto inexistente"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\nconst validateProductUpdate = require('../../../src/middlewares/validateProductUpdate');\nconst { productsService } = require('../../../src/services');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\ndescribe('testa middlewares', function () {\n  it('testa o validateProductUpdate na impossibilidade de atualizar um produto inexistente', async function () { \n    sinon.stub(productsService, 'put').resolves(null);\n    const req = { params: { id: 1 }, body: { name: 'Updated Product' } };\n    const res = {\n      status: sinon.stub().returnsThis(),\n      json: sinon.stub(),\n    };\n    const next = sinon.stub();\n    await validateProductUpdate(req, res, next);\n    expect(res.status).to.be.calledWith(404);\n    expect(res.json).to.be.calledWith({ message: 'Product not found' });\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/middlewares/validateQuantity.test.js":{"tests":[{"id":"16","name":"testa middlewares testa erro quando campo quantity não é fornecido"},{"id":"17","name":"testa middlewares testa erro quando quantity for menor ou igual 0"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\nconst validateQuantity = require('../../../src/middlewares/validateQuantity');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\ndescribe('testa middlewares', function () {\n  it('testa erro quando campo quantity não é fornecido', async function () {\n    const req = { body: {} };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateQuantity(req, res, next);\n    expect(res.status).to.be.calledWith(400);\n    expect(res.json).to.be.calledWith({ message: '\"quantity\" is required' });\n  });\n\n  it('testa erro quando quantity for menor ou igual 0', async function () {\n    const req = { body: { quantity: 0 } };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateQuantity(req, res, next);\n    expect(res.status).to.be.calledWith(422);\n    expect(res.json).to.be.calledWith({ message: '\"quantity\" must be greater than or equal to 1' });\n  });\n  \n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/middlewares/validateSales.test.js":{"tests":[{"id":"18","name":"testa middlewares testa impossibilidade de cadastrar venda caso não tenha campo productId"},{"id":"19","name":"testa middlewares testa impossibilidade de cadastrar venda caso não tenha campo quantity"}],"source":"const chai = require('chai');\nconst sinon = require('sinon');\nconst sinonChai = require('sinon-chai');\nconst validateSale = require('../../../src/middlewares/validateSale');\n\nconst { expect } = chai;\n\nchai.use(sinonChai);\n\ndescribe('testa middlewares', function () {\n  it('testa impossibilidade de cadastrar venda caso não tenha campo productId', async function () {\n    const req = { body: [{ quantity: 1 }] };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateSale(req, res, next);\n    expect(res.status).to.be.calledWith(400);\n    expect(res.json).to.be.calledWith({ message: '\"productId\" is required' });\n  });\n\n  it('testa impossibilidade de cadastrar venda caso não tenha campo quantity', async function () {\n    const req = { body: [{ productId: 1 }] };\n    const res = { status: sinon.stub(), json: sinon.stub() };\n    const next = sinon.stub();\n    res.status.returns(res);\n    await validateSale(req, res, next);\n    expect(res.status).to.be.calledWith(400);\n    expect(res.json).to.be.calledWith({ message: '\"quantity\" is required' });\n  });\n  \n  afterEach(function () {\n    sinon.restore();\n  });\n});\n"},"tests/unit/models/productsModel.test.js":{"tests":[{"id":"20","name":"Testa Model de produtos retorna a lista de produtos"},{"id":"21","name":"Testa Model de produtos retorna um produto específico"},{"id":"22","name":"Testa Model de produtos insere um produto específico"},{"id":"23","name":"Testa Model de produtos atualiza um produto"},{"id":"24","name":"Testa Model de produtos deleta um produto"}],"source":"const sinon = require('sinon');\nconst { expect } = require('chai');\nconst connection = require('../../../src/database/connection');\nconst { productsModel } = require('../../../src/models');\nconst { productsALL, productID, productPostName, productUpdate } = require('../../mocks/productsMock');\n\ndescribe('Testa Model de produtos', function () {\n  it('retorna a lista de produtos', async function () {\n    sinon.stub(connection, 'execute').resolves([productsALL]);\n    const products = await productsModel.getAll();\n    expect(products).to.be.an('array');\n    expect(products).to.have.lengthOf(3);\n    expect(products).to.be.deep.equal(productsALL);\n  });\n\n  it('retorna um produto específico', async function () {\n    sinon.stub(connection, 'execute').resolves([[productID]]);\n    const product = await productsModel.getById(1);\n    expect(product).to.be.an('object');\n    expect(product).to.be.deep.equal(productID);\n  });\n\n  it('insere um produto específico', async function () {\n    sinon.stub(connection, 'execute').resolves([{ insertId: 4 }]);\n    const product = await productsModel.insert(productPostName);\n    expect(product).to.be.equal(4);\n  });\n\n  it('atualiza um produto', async function () {\n    sinon.stub(connection, 'execute').resolves([{ affectedRows: 1 }]);\n    const product = await productsModel.put(1, productUpdate);\n    expect(product).to.be.an('object');\n    expect(product).to.be.deep.equal({ affectedRows: 1 });\n  });\n\n  it('deleta um produto', async function () {\n    sinon.stub(connection, 'execute').resolves([{ affectedRows: 1 }]);\n    const product = await productsModel.deleteId(1);\n    expect(product).to.be.an('object');\n    expect(product).to.be.deep.equal({ affectedRows: 1 });\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/models/salesModel.test.js":{"tests":[{"id":"25","name":"Testa Model de sales retorna a lista de sales"},{"id":"26","name":"Testa Model de sales retorna um sale específico"},{"id":"27","name":"Testa Model de sales não é possível listar uma venda que não existe"},{"id":"28","name":"Testa Model de sales cria o sale product id"},{"id":"29","name":"Testa Model de sales remove um sale"}],"source":"const sinon = require('sinon');\nconst { expect } = require('chai');\nconst connection = require('../../../src/database/connection');\nconst { salesModel } = require('../../../src/models');\nconst { salesALL, saleID, salesProducts } = require('../../mocks/salesMock');\n\ndescribe('Testa Model de sales', function () {\n  it('retorna a lista de sales', async function () {\n    sinon.stub(connection, 'execute').resolves([salesALL]);\n    const sales = await salesModel.getAll();\n    expect(sales).to.be.an('array');\n    expect(sales).to.have.lengthOf(3);\n    expect(sales).to.be.deep.equal(salesALL);\n  });\n\n  it('retorna um sale específico', async function () {\n    sinon.stub(connection, 'execute').resolves([saleID]);\n    const sale = await salesModel.getById(2);\n    expect(sale).to.be.an('object');\n    expect(sale).to.be.deep.equal(saleID);\n  });\n\n  it('não é possível listar uma venda que não existe', async function () {\n    sinon.stub(connection, 'execute').resolves([]);\n    const sale = await salesModel.getById(4);\n    expect(sale).to.be.equal(null);\n  });\n\n  it('cria o sale product id', async function () {\n    sinon.stub(connection, 'execute').resolves([{ insertId: 3 }]);\n    const sale = await salesModel.insert(salesProducts);\n    expect(sale).to.be.an('number');\n    expect(sale).to.be.deep.equal(3);\n  });\n\n  it('remove um sale', async function () {\n    sinon.stub(connection, 'execute').resolves([{ affectedRows: 1 }]);\n    const sale = await salesModel.deleteId(2);\n    expect(sale).to.be.an('object');\n    expect(sale).to.be.deep.equal({ affectedRows: 1 });\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/services/productsService.test.js":{"tests":[{"id":"30","name":"Testa Service de produtos retorna produtos com sucesso"},{"id":"31","name":"Testa Service de produtos insere um produto específico com sucesso"},{"id":"32","name":"Testa Service de produtos testa se ocorre um erro ao inserir um produto"},{"id":"33","name":"Testa Service de produtos atualiza um produto com sucesso"},{"id":"34","name":"Testa Service de produtos testa se ocorre um erro ao deletar um produto"}],"source":"const sinon = require('sinon');\nconst { expect } = require('chai');\nconst { productsModel } = require('../../../src/models');\nconst { productsALL, productPostId, productPostName, productID, productUpdateId, productUpdate, productDeleted } = require('../../mocks/productsMock');\nconst { productsService } = require('../../../src/services');\n\ndescribe('Testa Service de produtos', function () {\n  it('retorna produtos com sucesso', async function () {\n    sinon.stub(productsModel, 'getAll').resolves(productsALL);\n    const response = [\n      { id: 1, name: 'Martelo de Thor' },\n      { id: 2, name: 'Traje de encolhimento' },\n      { id: 3, name: 'Escudo do Capitão América' },\n    ];\n    const service = await productsService.getAll();\n    expect(service.status).to.be.equal('SUCCESSFUL');\n    expect(service.data).to.be.an('array');\n    expect(service.data).to.have.lengthOf(3);\n    expect(service.data).to.be.deep.equal(response);\n  });\n\n  it('insere um produto específico com sucesso', async function () {\n    sinon.stub(productsModel, 'insert').resolves(4);\n    sinon.stub(productsModel, 'getById').resolves(productPostId);\n    const service = await productsService.insert(productPostName);\n    expect(service.status).to.be.equal('CREATED');\n    expect(service.data).to.be.an('object');\n    expect(service.data).to.be.deep.equal(productPostId);\n  });\n\n  it('testa se ocorre um erro ao inserir um produto', async function () {\n    sinon.stub(productsModel, 'insert').resolves(null);\n    sinon.stub(productsModel, 'getById').resolves(productPostId);\n    const service = await productsService.insert(productPostName);\n    expect(service.status).to.be.equal('NOT_FOUND');\n  });\n\n  it('atualiza um produto com sucesso', async function () {\n    sinon.stub(productsModel, 'getById').onFirstCall().resolves(productID)\n      .onSecondCall()\n      .resolves(productUpdateId);\n    sinon.stub(productsModel, 'put').resolves(true);\n    const service = await productsService.put(1, productUpdate);\n    expect(service.status).to.be.equal('SUCCESSFUL');\n    expect(service.data).to.be.an('object');\n    expect(service.data).to.be.deep.equal(productUpdateId);\n  });\n\n  it('testa se ocorre um erro ao deletar um produto', async function () {\n    sinon.stub(productsModel, 'deleteId').resolves({ affectedRows: 1 });\n    sinon.stub(productsModel, 'getById').resolves(productDeleted);\n    const product = await productsService.deleteId(10);\n    expect(product.status).to.be.equal('NO_CONTENT');\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"},"tests/unit/services/salesService.test.js":{"tests":[{"id":"35","name":"Testa Service de sales retorna sales com sucesso"},{"id":"36","name":"Testa Service de sales testa a validação do schema"},{"id":"37","name":"Testa Service de sales retorna Product not found se não existir campo productId para cadastrar"},{"id":"38","name":"Testa Service de sales remove uma sale com sucesso"},{"id":"39","name":"Testa Service de sales deve retornar sucesso ao atualizar a quantidade"},{"id":"40","name":"Testa Service de sales deve retornar not found ao atualizar a quantidade com sale não encontrada"}],"source":"const sinon = require('sinon');\nconst { expect } = require('chai');\nconst { salesModel, productsModel } = require('../../../src/models');\nconst { salesALL /* , salesProducts */ } = require('../../mocks/salesMock');\nconst { salesService } = require('../../../src/services');\nconst { validation } = require('../../../src/services/validations/validations');\nconst { array } = require('../../../src/services/validations/saleSchema');\n\ndescribe('Testa Service de sales', function () {\n  it('retorna sales com sucesso', async function () {\n    sinon.stub(salesModel, 'getAll').resolves(salesALL);\n    const response = [\n      { saleId: 1, date: '2023-11-23T03:32:09.000Z', productId: 1, quantity: 5 },\n      { saleId: 1, date: '2023-11-23T03:32:09.000Z', productId: 2, quantity: 10 },\n      { saleId: 2, date: '2023-11-23T03:32:09.000Z', productId: 3, quantity: 15 },\n    ];\n    const service = await salesService.getAll();\n    expect(service.status).to.be.equal('SUCCESSFUL');\n    expect(service.data).to.be.an('array');\n    expect(service.data).to.have.lengthOf(3);\n    expect(service.data).to.be.deep.equal(response);\n  });\n\n  // it('cria uma sale com vários produtos com sucesso', async function () {\n  //   sinon.stub(salesModel, 'insertProducts').resolves(3);\n  //   const service = await salesService.insert(salesProducts);\n  //   expect(service.status).to.be.equal('CREATED');\n  //   expect(service.data.id).to.be.equal(3);\n  //   expect(service.data.itemsSold).to.be.deep.equal(salesProducts);\n  // });\n\n  it('testa a validação do schema', async function () {\n    sinon.stub(array, 'validate').resolves({ error: { message: 'Invalid data' } });\n    const result = await validation([{ productId: 1, quantity: 2 }]);\n    expect(result.type).to.equal('INVALID_DATA');\n    expect(result.message).to.equal('Invalid data');\n  });\n\n  it('retorna Product not found se não existir campo productId para cadastrar', async function () {\n    sinon.stub(array, 'validate').resolves({ error: null });\n    sinon.stub(productsModel, 'getById').resolves(undefined);\n    const result = await validation([{ productId: 1, quantity: 2 }]);\n    expect(result.type).to.equal('NOT_FOUND');\n    expect(result.message).to.equal('Product not found');\n  });\n\n  it('remove uma sale com sucesso', async function () {\n    sinon.stub(salesModel, 'getById').resolves(salesALL);\n    sinon.stub(salesModel, 'deleteId').resolves({ affectedRows: 1 });\n    const service = await salesService.deleteId(1);\n    expect(service.status).to.be.equal('NO_CONTENT');\n    expect(service.data).to.be.deep.equal({});\n  });\n\n  it('deve retornar sucesso ao atualizar a quantidade', async function () {\n    const saleId = 1;\n    const productId = 1;\n    const quantity = 10;\n    sinon.stub(salesModel, 'getById').resolves([{ date: '2023-12-07T21:17:28.000Z' }]);\n    sinon.stub(salesModel, 'updateQuantity').resolves({ quantity: 10 });\n    const result = await salesService.updateQuantity(saleId, productId, quantity);\n    expect(result).to.deep.equal({\n      status: 'SUCCESSFUL',\n      data: {\n        date: '2023-12-07T21:17:28.000Z',\n        productId: 1,\n        quantity: 10,\n        saleId: 1,\n      },\n    });\n  });\n\n  it('deve retornar not found ao atualizar a quantidade com sale não encontrada', async function () {\n    const saleId = 1;\n    const productId = 1;\n    const quantity = 10;\n    sinon.stub(salesModel, 'getById').returns([]);\n    const result = await salesService.updateQuantity(saleId, productId, quantity);\n    expect(result).to.deep.equal({\n      status: 'NOT_FOUND',\n      data: { message: 'Sale not found' },\n    });\n  });\n\n  afterEach(function () {\n    sinon.restore();\n  });\n});"}},"projectRoot":"/home/jadsonmattos/sd-033-a-store-manager/backend","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","packageManager":"npm","reporters":["html","clear-text","json","progress"],"mutate":["src/**/*.js","!src/{app,server}.js"],"mutator":{"excludedMutations":["StringLiteral","ObjectLiteral","ArrayDeclaration","ArrowFunction"],"plugins":null},"testRunner":"mocha","coverageAnalysis":"perTest","ignoreStatic":true,"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":"{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}","symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"6.4.2","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"6.4.2","mocha":"10.2.0"}}}